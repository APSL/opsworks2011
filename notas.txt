Sobre Opsworks: 

- Altamente customizable (control). Al final cualquier evento acaba en una ejecución Chef.
- Automatización del ciclo de vida de la aplicación
- Se ocupa de la integración con AWS.
- Arquitectura repetible
- Escalabilidad por defecto
- logs!
- Pago sólo por los recursos AWS usados.
- Muchas recetas Chef disponibles (opscode)

- Arquitectura repetible. Orientada a fallos (desarrollar orientada a fallos vs tolerante a fallos).
- Entornos de pruebas y pre-producción. 

- No hace falta documentación extensa y 

- No caemos en documentación extensa y desactualizada: La misma arquitectura se auto-documenta, 
mediante la definición de los *layers* y las recetas customizadas mantenidas en Git. 


Definiciones: 


Servicio de orquestación de

Orquestación de recursos AWS orientado al ciclo de vida de la aplicación.
Orientado a DevOps, y IT Admins.

- Backend Opsworks: 

* gestión central de la configuración

Servicio de Orquestación de aplicaciones que facilita el despliegue y operación de aplicaciones de todo tamaño.

Posible diapo: funciones opsworks
- provisionamiento
- despliegue
- modelado arquitecturas web
- gestión configuración
- auto escalado
- monitorización
- logging
- Gestión de recursos

Posible DIapo: 

¿Por qué es dificil escalar una aplicación? 

- detectar alarma de capacidad
- Provisionar nuevo servidor
- Insalar software
- Desplegar apliación
- parametrizar app (db..)
- Pasar de forma segura datos conexiones (passwd..)
- Chequear que la app está OK
- Añadir al balanceador


+ INTRO:

¿Cómo conseguimos esta flexibilidad y control?



Tras experiencia con OpsWorks, ¿donde está la clave de sus puntos a favor?

1) Configuración central: datos centralizados, pero con forma muy flexible de extender información: json. 
  - Datos provistos por OpsWorks (Formularios fijos en la consola web)
     + 
    Datos de recursos en gestión configuración central (instancias, IPs, capas, estados)
     + 
  - Custom Json.  

  Mezcla todos los datos, y están disponibles para las recetas y hooks en un único Árbol Json. 
  
  (metadata).

2) Flexibilidad para modificar o extender cualquier funcionalidad mediante recetas.
   Habilidad para mezclar recetas propias con las recetas por defecto, en layers Custom o built-in
 - Comunidad Chef. OpsCode. 
    https://github.com/opscode-cookbooks
    https://community.opscode.com/
    https://docs.getchef.com/

negativos
- Falla.
- Cambia. 
- Chef, curva entrada elevada. 
 
¿donde est


Ejemplo goldcar: una app tiene varios virtualhosts.



Sobre ciclo vida eventos: 

Diapositiva que muestra pasos del ciclo? 
(se puede coger de talk opsworks-docker)




LAYERS


- Grupo de instancias que comparten el mismo rol: App PHP, memcached..

Punto de unión entre app, recetas e instancias.
 (una app se ejecuta en un layer)
  (un layer contiene recetas, para cada uno de los eventos del ciclo)
  Las instancias pertenecen a un layer, o a varios si son compatibles.
  (ej: layer memcached y layer php, podrían compartir instancia).
  En el caso de pertenecer a varios layers, se ejecutan las recetas de cada layer.


Built-in

Mostrar pantallazo desplegable layers

Custom

Custom es un layer sólo con las recetas básicas. Podemos imitar comportamiento de layer pre-definido, simplemente añadiendo las recetas.


3) Chef / AGENT / Arquitectura

mostrar comando get_json

diapo con backend opsworks <-> agente chef.

OpsWorks backend lanza comandos, envia json.
El agente opsworks lanza "Chef solo", y le facilita el json.


INSTANCIAS

Estados: 

* Requested: OpsWorks ha pedido la instancia a EC2
* Pending: Esperando inicio instancia
* Booting: Arrancando
* Running Setup: Ejecutando recetas del layer, tanto del ciclo *setup* como del ciclo *deploy*
* Online: Lista para usar


CONTROL opsworks

ejemplos de:
consola
cli: aws opsworks describe stacks

API
  Ejemplo python.


CUSTOMIZACIÓN

C1- Tipos de customización


C3 - Sobre deploy (explicar deploy de 

- Explicar 


RESULTADO GOLDCAR

- Entornos de pruebas y pre-producción 
 - Stack clonado de producción
 - Podemos tener test parado, o iniciarlo automáticamente cada día.
 - Iniciamos y paramos automáticamente el entorno de test, con el horario laboral.


PRACTICA:

CREAR STACK DESDE 0

(capturas?)




CONCLUSION


- Añadir fuente documentación opsworks.

Ojo: curva de entrada de Chef
Desarrollo Chef lento: ciclo: 
* cambios 
* push 
* update-cookbooks 4m
* run-recipe
* logs
* test


Referencias: 
- opsworks docs
- chef docs. opscode.

